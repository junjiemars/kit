#+TITLE: Kit more than code
#+AUTHOR: Junjie Mars
#+STARTUP: overview
#+OPTIONS: toc:2


Now, a daily working environment can be build via few lines code on
the fly. And effetive, robust, beautiful, consistent on multiple
platforms.

There are two ways to use *kit*:
- clone git repository to your working host
#+BEGIN_SRC sh
git clone --depth=1 https://github.com/junjiemars/kit.git
#+END_SRC
- use single kit via bash
#+BEGIN_SRC sh
$ bash <(curl https://raw.githubusercontent.com/junjiemars/kit/master/<where-the-bash-script>)
#+END_SRC

* Unix-like
	:PROPERTIES:
	:CUSTOM_ID: unix_like
	:END:

Locate at =ul= directory.

** =crontab-env.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: crontab_envsh
	 :END:

Clone the current =shell= environment and the job list of [[https://en.wikipedia.org/wiki/Cron][crontab]] into
a plain text file named =crontab.list=.

#+BEGIN_SRC sh
# make crontab.list file
$ crontab-env.sh

# load crontab.list
crontab crontab.list
#+END_SRC

** =ctags.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: ctagssh
	 :END:

A shortcut of exuberant [[https://en.wikipedia.org/wiki/Ctags][Ctags]].

#+BEGIN_SRC sh
$ ./ctags.sh --help
$ ./ctags.sh --language=c
#+END_SRC

** =get-kit.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: get_kitsh
	 :END:

** =install-java-kits.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: install_java_kitsh
	 :END:

Install java programming environment.

#+BEGIN_SRC sh
$ HAS_ANT=1 HAS_ABCL=1 HAS_MAVEN=1 ./install-java-kit.sh
#+END_SRC

** =lr.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: LRSH
	 :END:

Log rotate.

** =nd.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: ndsh
	 :END:

A nginx configurator and shell maker.

** =setup-bash.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: setup_bashsh
	 :END:

Setup bash, aliases, paths and vars etc., on Windows, Darwin, Linux or
Unix-like box, and just one line code you need to getting things done:
#+BEGIN_SRC sh
$ bash <(curl https://raw.githubusercontent.com/junjiemars/kit/master/ul/setup-bash.sh)
#+END_SRC

For Windiows you can use [[https://git-scm.com/downloads][Git Bash]] instead.

You can boot it from local storage two.
#+BEGIN_SRC sh
# git clone it from github to <kit-local-dir>
$ git clone --depth=1 https://github.com/junjiemars/kit.git <kit-local-dir>

# boot up from <kit-local-dir>
$ GITHUB_H=file://<kit-local-dir> <kit-local-dir>/ul/setup-bash.sh
#+END_SRC

** =tc.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: tcsh
	 :END:

** =td.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: tdsh
	 :END:

** =unzip-cjk.sh=
	 :properties:
	 :custom_id: unzip_cjksh
	 :end:

Unzip specify code page.

** =wget.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: wgetsh
	 :END:

A shortcut of wget to mirror a [[https://en.wikipedia.org/wiki/Website][website]].

** =ws.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: wssh
	 :END:

A tiny-handy [[https://en.wikipedia.org/wiki/Web_server][Web server]] based on [[https://en.wikipedia.org/wiki/Netcat][Netcat]] (often abbreviated to =nc=).

#+BEGIN_SRC sh
$ ./ws.sh --help
$ ./ws.sh --http-port=8080 --http-version=1.1

$ curl -v http://<host>:8080
#+END_SRC

** References

- [[https://www.ssh.com/ssh/key/][SSH Key]]

* Windows
	:PROPERTIES:
	:CUSTOM_ID: windows
	:END:

** =e.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: esh
	 :END:

Get Windows default code page.

** =install-win-kits.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: install_win_kitssh
	 :END:

Setup Win32 programming environment.

** Tools

| name   | url                                     |
|--------+-----------------------------------------|
| aria2c | https://github.com/aria2/aria2/releases |
|        |                                         |

* Darwin
	:PROPERTIES:
	:CUSTOM_ID: darwin
	:END:

** Network

*** Routing

- Non-Persistent Routes
#+BEGIN_SRC sh
# display the entire routing table
netstat -rn

# add non-persistent routes
sudo route -n add 192.168/16 10.0.1.1

# delete non-persistent routes
sudo route -n delete 192.168/16
#+END_SRC

- Persistent Routes
#+BEGIN_SRC sh
# display all of the network names
networksetup -listallnetworkservices

# get IP address info for a specific network
networksetup -getinfo "Wi-Fi"

# display routes associated with a specific network
networksetup -getadditionalroutes "Wi-Fi"

# add a static route
networksetup -setadditionalroutes "Wi-Fi" 192.168.0.0 255.255.0.0 10.0.1.1

# delete all static routes
networksetup -setadditionalroutes "Wi-Fi"

#+END_SRC

*** Darwin Tips
	 :PROPERTIES:
	 :CUSTOM_ID: darwin_tips
	 :END:

- Which Port is Listening
#+BEGIN_SRC sh
$ lsof -iTCP -sTCP:LISTEN -n -P```
#+END_SRC

- Who is Listening on the Port
#+BEGIN_SRC sh
$ lsof -i :<port> -n -P
#+END_SRC

** Programming

*** =uninstall-jdk.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: uninstall_jdksh
	 :END:

Uninstall JDK on Darwin.

* Ubuntu
	:PROPERTIES:
	:CUSTOM_ID: ubuntu
	:END:

** =jd.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: jdsh
	 :END:

Allow =jdb= to attach process on Ubuntu.

* Docker
	:PROPERTIES:
	:CUSTOM_ID: docker
	:END:

** Docker on Linux
	 :PROPERTIES:
	 :CUSTOM_ID: docker_on_linux
	 :END:
	 
*** Run docker client via non root

Docker daemon run as root user in a group called =docker= by default.
#+BEGIN_SRC sh
$ sudo usermod -a -Gdocker <user>
$ sudo service docker[.io] restart
$ sudo reboot now
#+END_SRC

*** Port connection
*** Container linking

** Basic CentOS Development Environment
	 :PROPERTIES:
	 :CUSTOM_ID: basic_centos_development_environment
	 :end:
	 
Include basic building/networking tools, emacs/vim editors for
c/c++/clang/python/lua development. You can use root or default
sudoer: =u/Hell0= to login and play.

*** Build from Dockerfile

#+BEGIN_SRC sh
$ docker build -t centos-dev https://raw.githubusercontent.com/junjiemars/kit/master/docker/dev/centos.dockerfile
#+END_SRC

Or you can download [[https://raw.githubusercontent.com/junjiemars/kit/master/docker/dev/centos.dockerfile][centos.dockefile]] then build from it.


*** Play with =centos-dev= Docker Container

- once a time
#+BEGIN_SRC sh
$ docker run -w /home/u -h centos --privileged -u u -it --rm junjiemars/centos-dev /bin/bash
#+END_SRC

- as daemon
#+BEGIN_SRC sh
# gdb or lldb needs privileged permission
$ docker run --name centos-dev -w /home/u -h centos --privileged -d junjiemars/centos-dev
$ docker exec -it -u u centos-dev /bin/bash
#+END_SRC

- cannot change locale
#+BEGIN_SRC sh
$ localedef -i en_US -f UTF-8 en_US.UTF-8
#+END_SRC

** Basic Ubuntu Development Environment
	 :PROPERTIES:
	 :CUSTOM_ID: basic_ubuntu_development_environment
	 :END:

Include basic building/networking tools, emacs/vim editors for
c/c++/llvm/python/lua development. You can use root or default sudoer:
=u/Hell0= to login and play.

*** Build from Dockerfile

#+BEGIN_SRC sh
$ docker build -t ubuntu-dev https://raw.githubusercontent.com/junjiemars/kit/master/docker/dev/ubuntu.dockerfile
#+END_SRC

Or you can download [[https://raw.githubusercontent.com/junjiemars/kit/master/docker/dev/ubuntu.dockerfile][ubuntu.dockefile]] then build from it.

*** Play with =ubuntu-dev= Docker Container

- once a time
#+BEGIN_SRC sh
$ docker run -w /home/u -h ubuntu --privileged -u u -it --rm junjiemars/ubuntu-dev /bin/bash
#+END_SRC

- as daemon
#+BEGIN_SRC sh
$ docker run --name ubuntu-dev -w /home/u -h ubuntu --privileged -d junjiemars/ubuntu-dev
$ docker exec -it -u u ubuntu-dev /bin/bash
#+END_SRC

*** Avoid slow apt-get update and install

- Avoid IPv6 if you use a slow tunnel
#+BEGIN_SRC sh
$ sudo apt-get -o Acquire::ForceIPv4=true [update|install]
#+END_SRC

- Use mirrors which is based on your geo location
#+BEGIN_SRC sh
# use mirror automatically
$ sudo cp /etc/apt/sources.list /etc/apt/sources.list.ori
$ sudo sed -i 's#http:\/\/archive.ubuntu.com\/ubuntu\/#mirror:\/\/mirrors.ubuntu.com\/mirrors.txt#' /etc/apt/sources.list

# check mirrors list that based on your geo
$ curl -sL mirrors.ubuntu.com/mirrors.txt
#+END_SRC

- Aovid posioning mirrors: select another country

** Docker on Windows 10
	 :PROPERTIES:
	 :CUSTOM_ID: docker_on_windows_10
	 :END:

Now, the good news is Docker has native stable version for Windows 10
since 7/29/2016. If you need =Docker Machine= you can check
[[#docker-machine-on-windows-10][DockerMachine on Windows 10]].

*** Hyper-V Default Locations

- Control Panel > Administrative Tools > Hyper-V Manager
- Change =Virtual Machines= location
- Change =Virtual Hard Disks= location

*** tty Issue

- Mintty does not provide full TTY support;
- Use =cmd= or =PowerShell=;

*** Internal Virtual Switch
*** Failed to Start

- Hyper-V Manager: keep only one =MobiLinuxVM= and delete all the
  others

** Basic Java Development Environment
	 :PROPERTIES:
	 :CUSTOM_ID: basic_java_development_environment
	 :END:
	 
- Building tools: [[http://ant.apache.org][ant]], [[https://maven.apache.org][maven]], [[http://boot-clj.com][boot]], [[https://gradle.org][gradle]];
- Java programming lanuage: [[https://clojure.org][clojure]], [[http://www.groovy-lang.org][groovy]], [[http://www.scala-lang.org][scala]];

*** Build from Dockerfile

#+BEGIN_SRC sh
$ docker build -t java-dev https://raw.githubusercontent.com/junjiemars/kit/master/docker/dev/java.dockerfile
#+END_SRC

*** Play with java-dev Docker Container

- one time
#+BEGIN_SRC sh
$ docker run -w /home/u -h centos -u u -it --rm java-dev /bin/bash
#+END_SRC

- as daemon
#+BEGIN_SRC sh
$ docker run --name java-dev -w /home/u -h centos --privileged -d java-dev 
$ docker exec -it -u u java-dev /bin/bash
#+END_SRC

*** Install Java Programming Environment

Run into java-dev container and then run [[https://raw.githubusercontent.com/junjiemars/kit/master/ul/install-java-kits.sh][install-java-kits.sh]]
#+BEGIN_SRC sh
$ HAS_ALL=YES install-java-kits.sh
#+END_SRC

** Docker for Database
	 :PROPERTIES:
	 :CUSTOM_ID: docker_for_database
	 :END:

*** PostgreSQL
*** Oracle

You can pull it from [[https://hub.docker.com/][Docker Hub]], or build it from
[[https://raw.githubusercontent.com/junjiemars/kit/master/docker/db/oracle_xe.dockerfile][oracle_xe.dockerfile]]. Beside, Oracle XE 11g2 could not be downloaded
via curl, there needs some hack way to do it.

#+BEGIN_SRC sh
$ docker pull junjiemars/xe11g2:latest
$ docker run --name xe11g2 -p 1521:1521 -p 8080:9000 -d junjiemars/xe11g2:latest
#+END_SRC

** Docker Machine on Windows 10
	 :PROPERTIES:
	 :CUSTOM_ID: docker_machine_on_windows_10
	 :END:

- Install Docker Toolbox
- Run Docker Quickstart Terminal
- Play docker, it's same on Linux box

*** Install Docker Toolbox

- Kitematic is useless, don't install it
- Need VirtualBox and NIS6+

*** Configure Docker Quickstart Terminal

- =Font=: On Windows, the Console's font is ugly if the code page is
  936 for Chinese locale. Change the Windows locale to English and
  change the font to Consolas or others thats good for English
  lauguage. Restart Windows then switch the locale back to your
  locale, then restart it again.

- =Mintty=: Mintty is not based on Windows' Console, it's better than
  git-bash. To use Mintty via change Docker Quickstart Terminal's the
  target in =shortcut= to
#+BEGIN_EXAMPLE
"C:\Program Files\Git\usr\bin\mintty.exe" -i "c:\Program Files\Docker Toolbox\docker-quickstart-terminal.ico" /usr/bin/bash --login -i  "c:\Program Files\Docker Toolbox\start.sh"
#+END_EXAMPLE

- =MACHINE_STORAGE_PATH=: Environment variable points to docker's
  image location.

*** Access Windows dir in Docker Host

- Configure =Shared folders= on VirtualBox: 
#+BEGIN_EXAMPLE
<vbox-folder-label-name> -> <windows-local-dir>
#+END_EXAMPLE

- Mount the dir on Docker VM:
#+BEGIN_SRC sh
$ docker-machine ssh [machine-name]
$ mkdir -p /home/docker/<dir-name>
$ sudo mount -t vboxsf -o uid=1000,gid=50 <vbox-folder-label-name> /home/docker/<dir-name>
#+END_SRC

- Run Docker Host with =Volume=:
#+BEGIN_SRC sh
$ docker run -d -v <vbox-folder-label-name>:<docker-host-mount-dir> <image>
#+END_SRC

*** =tty= mode

If you got =cannot enable tty mode on non tty input=, so 
#+BEGIN_SRC sh
$ docker-machine ssh <default>
#+END_SRC

*** Sharing Files

- machine -> host:
#+BEGIN_SRC sh
$ docker-machine scp <machine>:<machine-path> <host-path>
#+END_SRC

- host -> machine:
#+BEGIN_SRC sh
$ docker-machine scp <host-path> <machine>:<machine-path>
#+END_SRC

- container -> host
#+BEGIN_SRC sh
# copy from container to machine 
$ docker cp <container-path> <machine-path>
# copy from machine to host
$ docker-machine scp <machine>:<machine-path> <host-path>
#+END_SRC

- host -> container vice versa.

** Docker Networking
	 :PROPERTIES:
	 :CUSTOM_ID: docker_networking
	 :END:

*** Bridge

The default =docker0= virtual bridge interface let communications:
- container -> container
- container -> host
- host -> container 

*** Overlay

*** SSH between Containers

- =Read from socket failed: Connection reset by peer=
#+BEGIN_SRC sh
$ sudo ssh-keygen -t rsa -f /etc/ssh/ssh_hosts_rsa_key
$ sudo ssh-keygen -t dsa -f /etc/ssh/ssh_hosts_dsa_key
#+END_SRC

*** Tips

- Container's IP address
#+BEGIN_SRC sh
# on default bridge network
$ docker inspect --format "{{.NetworkSettings.IPAddress}}" <container-id|container-name>

# on specified network
docker inspect --format "{{.NetworkSettings.Networks.<your-network>.IPAddress}}" <container-id|container-name>
#+END_SRC

- Link to Another Containers (/etc/hosts)
#+BEGIN_SRC sh
$ docker run --name n2 --link=n0 --link=n1 -d <docker-image>
#+END_SRC

- [[https://docs.docker.com/registry/recipes/mirror/][Registry as a pull through cache]]
#+BEGIN_SRC json
"registry-mirrors": [
    "https://registry.docker-cn.com",
    "https://docker.mirrors.ustc.edu.cn"
]
#+END_SRC

** Storage
	 :PROPERTIES:
	 :CUSTOM_ID: storage
	 :END:

#+BEGIN_SRC sh
# create mount the volume on /opt/vol
$ docker run --name n0 -w /home/u -h n0 -v /opt/vol -d <docker-iamge>

# mount a host volume on /opt/vol
$ docker run --name n0 -w /home/u -h n0 -v <host-path>:/opt/vol -d <docker-image>

# mount a host file
$ docker run --name n0 -w /home/u -h n0 -v ~/.bash_history:/home/u/.bash_history -d <docker-image>
#+END_SRC

* Raspberry
	:PROPERTIES:
	:CUSTOM_ID: raspbian
	:END:

** Ubuntu

Login with user =ubuntu= and default password =ubuntu=, then prompt to
change the default password.

*** Install

**** On MacOS

#+BEGIN_SRC sh
sudo diskutil list
sudo diskutil unmountdisk /dev/xxx
xzcat ubuntu.img.xz | sudo dd of=/dev/xxx bs=4M
#+END_SRC

*** Network

**** Static IP Address

#+BEGIN_SRC sh
sudo vi /etc/netplan/50-cloud-init.yaml
#+END_SRC

#+BEGIN_SRC yaml
network:
  version: 2
  ethernets:
    eth0:
      dhcp4: no
      addresses: [192.168.1.15/24,]
      gateway4: 192.168.1.1
      nameservers:
        addresses: [208.67.222.222,8.8.8.8]
      match:
        macaddress: xx:xx:xx:xx:xx:xx
      set-name: eth0

#+END_SRC

#+BEGIN_SRC sh
sudo netplan apply
#+END_SRC

** Raspberry References

- [[https://wiki.ubuntu.com/ARM/RaspberryPi][ubuntu wiki]]
- [[https://www.raspberrypi.org/documentation/configuration/boot_folder.md][The boot folder]]

* Oracle
	:PROPERTIES:
	:CUSTOM_ID: oracle
	:END:

* VCS

** Subversion

On Windows, =svn= doesn't support posix repository URL.

#+BEGIN_SRC sh
# create repository
svnadmin create /e/lab/vcs/svn/repo

# make hooks/pre-revprop-change file
chmod u+x hooks/pre-revprop-change

# checkout repository
svn checkout file://E:/lab/vcs/svn/repo
#+END_SRC

hooks/pre-revprops-change
#+BEGIN_SRC sh
#!/bin/sh
exit 0;
#+END_SRC


** References
- [[https://git-scm.com/book/en/v1/Git-and-Other-Systems-Git-and-Subversion][Git and Other Systems Git and Subversion]]

* All
	:PROPERTIES:
	:CUSTOM_ID: all
	:END:


