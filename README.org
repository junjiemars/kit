#+TITLE: Kit more than code
#+AUTHOR: Junjie Mars
#+STARTUP: overview
#+OPTIONS: toc:1

* Quick start
  :PROPERTIES:
  :CUSTOM_ID: quick-start
  :END:

#+ATTR_HTML: :style text-align:left
Now, a daily working environment can be build via few lines code on
the fly. And effetive, robust, beautiful, consistent on multiple
platforms.

There are two ways to use *kit*:
- clone git repository to your working host
#+BEGIN_SRC sh
git clone --depth=1 https://github.com/junjiemars/kit.git
#+END_SRC
- use single kit via bash
#+BEGIN_SRC sh
$ bash <(curl https://raw.githubusercontent.com/junjiemars/kit/master/<where-the-bash-script>)
#+END_SRC

* Unix-like
	:PROPERTIES:
	:CUSTOM_ID: unix_like
	:END:

Kits for Unix-like platforms.

Locate at =ul= directory.

** [[file:ul/crontab-env.sh][crontab-env.sh]]
	 :PROPERTIES:
	 :CUSTOM_ID: unix_like_crontab_env_sh
	 :END:

Clone the current =shell= environment and the job list of [[https://en.wikipedia.org/wiki/Cron][crontab]] into
a plain text file named =crontab.list=.

#+BEGIN_SRC sh
# make crontab.list file
$ crontab-env.sh

# load crontab.list
crontab crontab.list
#+END_SRC

** [[file:ul/ctags.sh][ctags.sh]]
	 :PROPERTIES:
	 :CUSTOM_ID: unix_like_ctags_sh
	 :END:

A shortcut of exuberant [[https://en.wikipedia.org/wiki/Ctags][Ctags]].

#+BEGIN_SRC sh
$ ./ctags.sh --help
$ ./ctags.sh --language=c
#+END_SRC

** [[file:ul/get-kit.sh][get-kit.sh]]
	 :PROPERTIES:
	 :CUSTOM_ID: unix_like_get_kit_sh
	 :END:

Download and configure kit via web.

** =install-java-kits.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: install_java_kitsh
	 :END:

Install java programming environment.

#+BEGIN_SRC sh
$ HAS_ANT=1 HAS_ABCL=1 HAS_MAVEN=1 ./install-java-kit.sh
#+END_SRC

** =lr.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: LRSH
	 :END:

Log rotate.

** =nd.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: ndsh
	 :END:

A nginx configurator and shell maker.

** =sh.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: shell
	 :END:

Setup bash or zsh, aliases, paths and vars etc., on Windows, Darwin,
Linux or Unix-like box, and just one line code you need to getting
things done:
#+BEGIN_SRC sh
$ bash <(curl https://raw.githubusercontent.com/junjiemars/kit/master/ul/sh.sh)
# or zsh
$ $ zsh <(curl https://raw.githubusercontent.com/junjiemars/kit/master/ul/sh.sh)
#+END_SRC

For Windiows you can use [[https://git-scm.com/downloads][Git Bash]] instead.

You can boot it from local storage two.
#+BEGIN_SRC sh
# git clone it from github to <kit-local-dir>
$ git clone --depth=1 https://github.com/junjiemars/kit.git <kit-local-dir>

# boot up from <kit-local-dir>
$ GITHUB_H=file://<kit-local-dir> <kit-local-dir>/ul/shell.sh
#+END_SRC

** =tc.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: tcsh
	 :END:

** =td.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: tdsh
	 :END:

** =unzip-cjk.sh=
	 :properties:
	 :custom_id: unzip_cjksh
	 :end:

Unzip specify code page.

** =wget.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: wgetsh
	 :END:

A shortcut of wget to mirror a [[https://en.wikipedia.org/wiki/Website][website]].

** [[file:ul/ws.sh][ws.sh]]
	 :PROPERTIES:
	 :CUSTOM_ID: wssh
	 :END:

A tiny-handy [[https://en.wikipedia.org/wiki/Web_server][Web server]] based on [[https://en.wikipedia.org/wiki/Netcat][Netcat]] (often abbreviated to =nc=).

#+BEGIN_SRC sh
$ ./ws.sh --help
$ ./ws.sh --http-port=8080 --http-version=1.1

$ curl -v http://<host>:8080
#+END_SRC

** Reference
	:PROPERTIES:
	:CUSTOM_ID: unix_like_reference
	:END:

- [[https://www.ssh.com/ssh/key/][SSH Key]]

* Windows
	:PROPERTIES:
	:CUSTOM_ID: windows
	:END:

** =e.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: esh
	 :END:

Get Windows default code page.

** =install-win-kits.sh=
	 :PROPERTIES:
	 :CUSTOM_ID: install_win_kitssh
	 :END:

Setup Win32 programming environment.

** Tools

| name   | url                                     |
|--------+-----------------------------------------|
| aria2c | https://github.com/aria2/aria2/releases |
|        |                                         |

** Issues

- Disk slow on Windows 10: Disable write cache in Disk > Hardware > Policies

* Darwin
	:PROPERTIES:
	:CUSTOM_ID: darwin
	:END:

** Boot

*** Disk

**** UEFI

UEFI(Unified Extensible Firmware Interface) is known as a motherboard
firmware interface for computers. With UEFI boot mode, your computer
can initialize the hardware components and boot the OS stored on the
hard disk.

**** GPT

GPT(GUID Partition Table) is a partitioning schemes that introduced by
Intel by the 1990s.

**** MBR

#+BEGIN_SRC sh
sudo diskutil partitionDisk /dev/disk3 4 MBR \
  MS-DOS WIN 20G \
	MS-DOS LIN 20G \
	MS-DOS MAC 20G \
	MS-DOS DTA R
#+END_SRC

#+BEGIN_SRC sh
# enter command mode
sudo fdisk -e /dev/disk3
#+END_SRC

*** Recovery

*** References

- [[https://support.apple.com/en-us/HT201372][How to create a bootable installer for macOS]]
- [[https://support.apple.com/en-us/HT201314][About macOS Recovery on Intel-based Mac computers]]

** Launchpad

[[file:darwin/remove-from-launchpad.sh][remove-from-launchpad.sh]]
#+BEGIN_SRC sh
# replace APP_NAME_CASE_SENSITIVE with the app name
sqlite3 \
$(find /private/var/folders \( -name com.apple.dock.launchpad -a -user $USER \) \
2> /dev/null)/db/db \
"DELETE FROM apps WHERE title='APP_NAME_CASE_SENSITIVE';" \
&& killall Dock
#+END_SRC

** Network

*** Routing

- Non-Persistent Routes
#+BEGIN_SRC sh
# display the entire routing table
netstat -rn

# add non-persistent routes
sudo route -n add 192.168/16 10.0.1.1

# delete non-persistent routes
sudo route -n delete 192.168/16
#+END_SRC

- Persistent Routes
#+BEGIN_SRC sh
# display all of the network names
networksetup -listallnetworkservices

# get IP address info for a specific network
networksetup -getinfo "Wi-Fi"

# display routes associated with a specific network
networksetup -getadditionalroutes "Wi-Fi"

# add a static route
networksetup -setadditionalroutes "Wi-Fi" 192.168.0.0 255.255.0.0 10.0.1.1

# delete all static routes
networksetup -setadditionalroutes "Wi-Fi"

#+END_SRC

*** DNS

- =/private/etc/hosts=
#+BEGIN_SRC sh
# clean dns cache
sudo killall -HUP mDNSResponder
#+END_SRC

*** Port

- Which Port is Listening
#+BEGIN_SRC sh
$ lsof -iTCP -sTCP:LISTEN -n -P
#+END_SRC

- Who is Listening on the Port
#+BEGIN_SRC sh
$ lsof -i :<port> -n -P
#+END_SRC

** Applications

- =/Applications=

- =~/Library=
#+BEGIN_SRC sh
rm -r ~/Library/Saved Application State/${APP}
rm -r ~/Library/Containers/${APP}
rm -r ~/Library/Caches/${APP}
rm -r ~/Library/Application Support/${APP}
rm -r ~/Library/Application Scripts/${APP}
rm -r ~/Library/Preferences/${APP}
#+END_SRC

- Remove Google software
#+BEGIN_SRC sh
# local uninstallation:
python ~/Library/Google/GoogleSoftwareUpdate/GoogleSoftwareUpdate.bundle/\
Contents/Resources/GoogleSoftwareUpdateAgent.app/Contents/Resources/\
install.py --uninstall
touch ~/Library/Google/GoogleSoftwareUpdate
# global uninstallation:
sudo python /Library/Google/GoogleSoftwareUpdate/GoogleSoftwareUpdate.bundle/\
Contents/Resources/GoogleSoftwareUpdateAgent.app/Contents/Resources/\
install.py --uninstall
sudo touch /Library/Google/GoogleSoftwareUpdate
#+END_SRC

- Remove Oracle JDK
#+BEGIN_SRC sh
rm -r /Library/Java/JavaVirtualMachines/${JDK_VER}
rm -r /Library/PreferencePanes/JavaControlPanel.prefPane
rm -r /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin
rm -r /Library/Application Support/Oracle
#+END_SRC

- Install OpenJDK
#+BEGIN_SRC sh
sudo port install openjdk${JDK_VER}
# JAVA_HOME=/Library/Java/JavaVirtualMachines/openjdk%{JDK_VER}/Contents/Home
#+END_SRC

- Install Wireshark
#+BEING_SRC sh
sudo port install wireshark3
#+END_SRC

#+BEGIN_QUOTE
wireshark-chmodbpf has the following notes:
    To fully complete your installation and use Wireshark
    to capture from devices (like network interfaces) please run:

      sudo dseditgroup -q -o edit -a [USER] -t user access_bpf
    and change [USER] to the user that needs access to the devices.
    A reboot should not be required for this to take effect.

    A startup item has been generated that will start wireshark-chmodbpf with
    launchd, and will be enabled automatically on activation. Execute the
    following command to manually _disable_ it:
    
      sudo port unload wireshark-chmodbpf
#+END_QUOTE

** Launch Daemons and Agents

There are two types of services that *launchd* manages:
- launch daemon can run without a user logged in.
	=/System/Library/LaunchDaemons/= for Apple.
  =/Library/LaunchDaemons/= for the rest.
- launch agent need the user to be logged in.
	=/System/Library/LaunchAgents/= for Apple.
	=/Library/LaunchAgents/= for rest.

*** =launchctl=

=launchctl= interfaces with launchd to manage and inspect daemons,
agents and XPC services.

*** References
- [[https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html][Creating Launch Daemons and Agents]]

** APFS
	 

*** References
- [[https://blog.cugu.eu/post/apfs/][APFS filesystem format]]

** Package Manager

*** MacPorts

* Ubuntu
	:PROPERTIES:
	:CUSTOM_ID: ubuntu
	:END:

** Booting
	 :PROPERTIES:
	 :CUSTOM_ID: ubuntu_booting
	 :END:

*** References

- [[https://wiki.ubuntu.com/Booting][Ubuntu Booting]]

** init
	 :PROPERTIES:
	 :CUSTOM_ID: ubuntu_init
	 :END:

*** service
		:PROPERTIES:
		:CUSTOM_ID: ubuntu_init_service
		:END:

#+BEGIN_SRC shell
service --status-all
#+END_SRC

#+BEGIN_SRC shell
ls -lh /etc/init.d/
#+END_SRC

#+BEGIN_SRC shell
service acpid status
#+END_SRC

*** systemctl
		:PROPERTIES:
		:CUSTOM_ID: ubuntu_init_systemctl
		:END:

Control the systemd system and service manager.

#+BEGIN_SRC shell
systemctl show-environment
#+END_SRC

#+BEGIN_SRC shell
systemctl list-units
#+END_SRC

#+BEGIN_SRC shell
systemctl list-sockets
#+END_SRC

#+BEGIN_SRC shell
systemctl list-timers
#+END_SRC

#+BEGIN_SRC shell
systemctl list-jobs
#+END_SRC


#+BEGIN_SRC shell
systemctl status acpid
#+END_SRC

*** References
		:PROPERTIES:
		:CUSTOM_ID: ubuntu_init_references
		:END:

- [[https://www.tecmint.com/systemd-replaces-init-in-linux/][The Story Behind 'init' and 'systemd']]

** Performance

*** Limits

=/etc/security/limits.conf=, replace =user1= with real user name.
#+BEGIN_EXAMPLE
,* 	 soft     nproc          655350
,* 	 hard     nproc          655350
,* 	 soft     nofile         655350
,* 	 hard     nofile         655350
user1 	 soft     nproc          200000
user1 	 hard     nproc          200000
user1 	 soft     nofile         200000
user1 	 hard     nofile         200000
#+END_EXAMPLE

*** Swap

#+BEGIN_SRC sh
# write
sysctl -w vm.swappiness=30
# load
sysctl -p
# check
sysctl -a |*grep swap.*
less /proc/sys/vm/swappiness
#+END_SRC

*** Disk

#+BEGIN_SRC sh
$ cat /proc/vmstat | grep -E "dirty|writeback"

vm.dirty_background_ratio = 5
vm.dirty_background_bytes = 0
vm.dirty_ratio = 10
vm.dirty_bytes = 0
vm.dirty_writeback_centisecs = 500
vm.dirty_expire_centisecs = 3000
#+END_SRC

*** Memory

RAM is split into Zones
- Direct Memory Access (DMA): This is the low 16 MB of memory. The
  zone gets its name because, a long time ago, there were computers
  that could only do direct memory access into this area of physical
  memory.
- Direct Memory Access 32: Despite its name, Direct Memory Access 32
  (DMA32) is a zone only found in 64-bit Linux. It’s the low 4 GB of
  memory. Linux running on 32-bit computers can only do DMA to this
  amount of RAM (unless they are using the physical address extension
  (PAE) kernel), which is how the zone got its name. Although, on
  32-bit computers, it is called HighMem.
- Normal: On 64-bit computers, normal memory is all of the RAM above
  4GB (roughly). On 32-bit machines, it is RAM between 16 MB and 896
  MB.
- HighMem: This only exists on 32-bit Linux computers. It is all RAM
  above 896 MB, including RAM above 4 GB on sufficiently large
  machines.

#+BEGIN_SRC sh
getconf PAGESIZE
less /proc/zoneinfo
sudo cat /proc/pagetypeinfo
less /proc/buddyinfo
#+END_SRC

*** CPU

#+BEGIN_SRC sh
# show old 
for i in 0 1 2 3; do cat /sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor; done
# trans powersave to performance
# /etc/rc.local
for i in 0 1 2 3; do echo performance > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor; done
#+END_SRC

*** Network
*** References
- [[https://cromwell-intl.com/open-source/performance-tuning/disks.html][Performance Tuning on Linux — Disk I/O]]
- [[https://cromwell-intl.com/open-source/performance-tuning/tcp.html][Performance Tuning on Linux — TCP]]
- [[https://wiki.mikejung.biz/Ubuntu_Performance_Tuning][Ubuntu Performance Tuning]]
- [[https://www.howtogeek.com/449691/what-is-swapiness-on-linux-and-how-to-change-it/][What Is Swappiness on Linux?]]
- [[https://utcc.utoronto.ca/~cks/space/blog/linux/KernelMemoryZones][How the Linux kernel divides up your RAM]]
- [[https://lonesysadmin.net/2013/12/22/better-linux-disk-caching-performance-vm-dirty_ratio/][Better Linux Disk Caching & Performance with vm.dirty_ratio & vm.dirty_background_ratio]]
- [[https://hammertux.github.io/slab-allocator][The Slab Allocator in the Linux kernel]]

** journal

*** journalctl
*** dmesg

** snap
	 :PROPERTIES:
	 :CUSTOM_ID: ubuntu_snap
	 :END:

Location =/var/lib/snapd/snaps/=

Just keep the current =ul/snap-rm.sh= version.

* Docker
	:PROPERTIES:
	:CUSTOM_ID: docker
	:END:

** Docker on Linux
	 :PROPERTIES:
	 :CUSTOM_ID: docker_on_linux
	 :END:
	 
*** Run docker client via non root

Docker daemon run as root user in a group called =docker= by default.
#+BEGIN_SRC sh
$ sudo usermod -a -Gdocker <user>
$ sudo service docker[.io] restart
$ sudo reboot now
#+END_SRC

*** Port connection
*** Container linking

** Basic CentOS Development Environment
	 :PROPERTIES:
	 :CUSTOM_ID: basic_centos_development_environment
	 :end:
	 
Include basic building/networking tools, emacs/vim editors for
c/c++/clang/python/lua development. You can use root or default
sudoer: =u/Hell0= to login and play.

*** Build from Dockerfile

#+BEGIN_SRC sh
$ docker build -t centos-dev https://raw.githubusercontent.com/junjiemars/kit/master/docker/dev/centos.dockerfile
#+END_SRC

Or you can download [[https://raw.githubusercontent.com/junjiemars/kit/master/docker/dev/centos.dockerfile][centos.dockefile]] then build from it.

*** Play with =centos-dev= Docker Container

- once a time
#+BEGIN_SRC sh
$ docker run -w /home/u -h centos --privileged -u u -it --rm junjiemars/centos-dev /bin/bash
#+END_SRC

- as daemon
#+BEGIN_SRC sh
# gdb or lldb needs privileged permission
$ docker run --name centos-dev -w /home/u -h centos --privileged -d junjiemars/centos-dev
$ docker exec -it -u u centos-dev /bin/bash
#+END_SRC

- cannot change locale
#+BEGIN_SRC sh
$ localedef -i en_US -f UTF-8 en_US.UTF-8
#+END_SRC

** Basic Ubuntu Development Environment
	 :PROPERTIES:
	 :CUSTOM_ID: basic_ubuntu_development_environment
	 :END:

Include basic building/networking tools, emacs/vim editors for
c/c++/llvm/python/lua development. You can use root or default sudoer:
=u/Hell0= to login and play.

*** Build from Dockerfile

#+BEGIN_SRC sh
$ docker build -t ubuntu-dev https://raw.githubusercontent.com/junjiemars/kit/master/docker/dev/ubuntu.dockerfile
#+END_SRC

Or you can download [[https://raw.githubusercontent.com/junjiemars/kit/master/docker/dev/ubuntu.dockerfile][ubuntu.dockefile]] then build from it.

*** Play with =ubuntu-dev= Docker Container

- once a time
#+BEGIN_SRC sh
$ docker run -w /home/u -h ubuntu --privileged -u u -it --rm junjiemars/ubuntu-dev /bin/bash
#+END_SRC

- as daemon
#+BEGIN_SRC sh
$ docker run --name ubuntu-dev -w /home/u -h ubuntu --privileged -d junjiemars/ubuntu-dev
$ docker exec -it -u u ubuntu-dev /bin/bash
#+END_SRC

*** Avoid slow apt-get update and install

- Avoid IPv6 if you use a slow tunnel
#+BEGIN_SRC sh
$ sudo apt-get -o Acquire::ForceIPv4=true [update|install]
#+END_SRC

- Use mirrors which is based on your geo location
#+BEGIN_SRC sh
# use mirror automatically
$ sudo cp /etc/apt/sources.list /etc/apt/sources.list.ori
$ sudo sed -i 's#http:\/\/archive.ubuntu.com\/ubuntu\/#mirror:\/\/mirrors.ubuntu.com\/mirrors.txt#' /etc/apt/sources.list

# check mirrors list that based on your geo
$ curl -sL mirrors.ubuntu.com/mirrors.txt
#+END_SRC

- Aovid posioning mirrors: select another country

** Docker on Windows 10
	 :PROPERTIES:
	 :CUSTOM_ID: docker_on_windows_10
	 :END:

Now, the good news is Docker has native stable version for Windows 10
since 7/29/2016. If you need =Docker Machine= you can check
[[https://docs.docker.com/machine/install-machine/][DockerMachine on Windows 10]].

*** Hyper-V Default Locations

- Control Panel > Administrative Tools > Hyper-V Manager
- Change =Virtual Machines= location
- Change =Virtual Hard Disks= location

*** tty Issue

- Mintty does not provide full TTY support;
- Use =cmd= or =PowerShell=;

*** Internal Virtual Switch
*** Failed to Start

- Hyper-V Manager: keep only one =MobiLinuxVM= and delete all the
  others

** Basic Java Development Environment
	 :PROPERTIES:
	 :CUSTOM_ID: basic_java_development_environment
	 :END:
	 
- Building tools: [[http://ant.apache.org][ant]], [[https://maven.apache.org][maven]], [[http://boot-clj.com][boot]], [[https://gradle.org][gradle]];
- Java programming lanuage: [[https://clojure.org][clojure]], [[http://www.groovy-lang.org][groovy]], [[http://www.scala-lang.org][scala]];

*** Build from Dockerfile

#+BEGIN_SRC sh
$ docker build -t java-dev https://raw.githubusercontent.com/junjiemars/kit/master/docker/dev/java.dockerfile
#+END_SRC

*** Play with java-dev Docker Container

- one time
#+BEGIN_SRC sh
$ docker run -w /home/u -h centos -u u -it --rm java-dev /bin/bash
#+END_SRC

- as daemon
#+BEGIN_SRC sh
$ docker run --name java-dev -w /home/u -h centos --privileged -d java-dev 
$ docker exec -it -u u java-dev /bin/bash
#+END_SRC

*** Install Java Programming Environment

Run into java-dev container and then run [[https://raw.githubusercontent.com/junjiemars/kit/master/ul/install-java-kits.sh][install-java-kits.sh]]
#+BEGIN_SRC sh
$ HAS_ALL=YES install-java-kits.sh
#+END_SRC

** Docker for Database
	 :PROPERTIES:
	 :CUSTOM_ID: docker_for_database
	 :END:

*** PostgreSQL
*** Oracle

You can pull it from [[https://hub.docker.com/][Docker Hub]], or build it from
[[https://raw.githubusercontent.com/junjiemars/kit/master/docker/db/oracle_xe.dockerfile][oracle_xe.dockerfile]]. Beside, Oracle XE 11g2 could not be downloaded
via curl, there needs some hack way to do it.

#+BEGIN_SRC sh
$ docker pull junjiemars/xe11g2:latest
$ docker run --name xe11g2 -p 1521:1521 -p 8080:9000 -d junjiemars/xe11g2:latest
#+END_SRC

** Docker Machine on Windows 10
	 :PROPERTIES:
	 :CUSTOM_ID: docker_machine_on_windows_10
	 :END:

- Install Docker Toolbox
- Run Docker Quickstart Terminal
- Play docker, it's same on Linux box

*** Install Docker Toolbox

- Kitematic is useless, don't install it
- Need VirtualBox and NIS6+

*** Configure Docker Quickstart Terminal

- =Font=: On Windows, the Console's font is ugly if the code page is
  936 for Chinese locale. Change the Windows locale to English and
  change the font to Consolas or others thats good for English
  lauguage. Restart Windows then switch the locale back to your
  locale, then restart it again.

- =Mintty=: Mintty is not based on Windows' Console, it's better than
  git-bash. To use Mintty via change Docker Quickstart Terminal's the
  target in =shortcut= to
#+BEGIN_EXAMPLE
"C:\Program Files\Git\usr\bin\mintty.exe" -i "c:\Program Files\Docker Toolbox\docker-quickstart-terminal.ico" /usr/bin/bash --login -i  "c:\Program Files\Docker Toolbox\start.sh"
#+END_EXAMPLE

- =MACHINE_STORAGE_PATH=: Environment variable points to docker's
  image location.

*** Access Windows dir in Docker Host

- Configure =Shared folders= on VirtualBox: 
#+BEGIN_EXAMPLE
<vbox-folder-label-name> -> <windows-local-dir>
#+END_EXAMPLE

- Mount the dir on Docker VM:
#+BEGIN_SRC sh
$ docker-machine ssh [machine-name]
$ mkdir -p /home/docker/<dir-name>
$ sudo mount -t vboxsf -o uid=1000,gid=50 <vbox-folder-label-name> /home/docker/<dir-name>
#+END_SRC

- Run Docker Host with =Volume=:
#+BEGIN_SRC sh
$ docker run -d -v <vbox-folder-label-name>:<docker-host-mount-dir> <image>
#+END_SRC

*** =tty= mode

If you got =cannot enable tty mode on non tty input=, so 
#+BEGIN_SRC sh
$ docker-machine ssh <default>
#+END_SRC

*** Sharing Files

- machine -> host:
#+BEGIN_SRC sh
$ docker-machine scp <machine>:<machine-path> <host-path>
#+END_SRC

- host -> machine:
#+BEGIN_SRC sh
$ docker-machine scp <host-path> <machine>:<machine-path>
#+END_SRC

- container -> host
#+BEGIN_SRC sh
# copy from container to machine 
$ docker cp <container-path> <machine-path>
# copy from machine to host
$ docker-machine scp <machine>:<machine-path> <host-path>
#+END_SRC

- host -> container vice versa.

** Docker Networking
	 :PROPERTIES:
	 :CUSTOM_ID: docker_networking
	 :END:

*** Bridge

The default =docker0= virtual bridge interface let communications:
- container -> container
- container -> host
- host -> container 

*** Overlay

*** SSH between Containers

- =Read from socket failed: Connection reset by peer=
#+BEGIN_SRC sh
$ sudo ssh-keygen -t rsa -f /etc/ssh/ssh_hosts_rsa_key
$ sudo ssh-keygen -t dsa -f /etc/ssh/ssh_hosts_dsa_key
#+END_SRC

*** Tips

- Container's IP address
#+BEGIN_SRC sh
# on default bridge network
$ docker inspect --format "{{.NetworkSettings.IPAddress}}" <container-id|container-name>

# on specified network
docker inspect --format "{{.NetworkSettings.Networks.<your-network>.IPAddress}}" <container-id|container-name>
#+END_SRC

- Link to Another Containers (/etc/hosts)
#+BEGIN_SRC sh
$ docker run --name n2 --link=n0 --link=n1 -d <docker-image>
#+END_SRC

- [[https://docs.docker.com/registry/recipes/mirror/][Registry as a pull through cache]]
#+BEGIN_SRC json
"registry-mirrors": [
    "https://registry.docker-cn.com",
    "https://docker.mirrors.ustc.edu.cn"
]
#+END_SRC

** Storage
	 :PROPERTIES:
	 :CUSTOM_ID: storage
	 :END:

#+BEGIN_SRC sh
# create mount the volume on /opt/vol
$ docker run --name n0 -w /home/u -h n0 -v /opt/vol -d <docker-iamge>

# mount a host volume on /opt/vol
$ docker run --name n0 -w /home/u -h n0 -v <host-path>:/opt/vol -d <docker-image>

# mount a host file
$ docker run --name n0 -w /home/u -h n0 -v ~/.bash_history:/home/u/.bash_history -d <docker-image>
#+END_SRC

* Raspberry
	:PROPERTIES:
	:CUSTOM_ID: raspbian
	:END:

** Ubuntu

Login with user =ubuntu= and default password =ubuntu=, then prompt to
change the default password.

*** Install

**** On MacOS

#+BEGIN_SRC sh
sudo diskutil list
sudo diskutil unmountdisk /dev/xxx
xzcat ubuntu.img.xz | sudo dd of=/dev/xxx bs=4M
#+END_SRC

*** Network

**** Static IP Address

#+BEGIN_SRC sh
sudo vi /etc/netplan/50-cloud-init.yaml
#+END_SRC

#+BEGIN_SRC yaml
network:
  version: 2
  ethernets:
    eth0:
      dhcp4: no
      addresses: [192.168.1.15/24,]
      gateway4: 192.168.1.1
      nameservers:
        addresses: [208.67.222.222,8.8.8.8]
      match:
        macaddress: xx:xx:xx:xx:xx:xx
      set-name: eth0

#+END_SRC

#+BEGIN_SRC sh
sudo netplan apply
#+END_SRC

** Raspberry References

- [[https://wiki.ubuntu.com/ARM/RaspberryPi][ubuntu wiki]]
- [[https://www.raspberrypi.org/documentation/configuration/boot_folder.md][The boot folder]]

* Database
** Oracle
	:PROPERTIES:
	:CUSTOM_ID: oracle
	:END:

#+BEGIN_SRC sh
make -C docker/compose/ -f oraclexe.Makefile start
#+END_SRC

*** SQL*Plus

You can using raw =sqlplus= command program or an awsome tool
=sqlplus.sh=, or Emacs.

    
** Sqlite

*** Scheme

List tables
#+BEGIN_SRC sql
select name from sqlite_master where type='table';
#+END_SRC

Table structure
#+BEING_SRC sql
pragma table_info(<table>);
#+END_SRC

** MySQL

#+BEGIN_SRC sh
make -C docker/compose/ -f mysql.Makefile start
#+END_SRC

*** System variables

#+BEGIN_SRC sh
mysql> select @@sql_mode;
mysql> SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));
mysql> SET GLOBAL sql_mode = sys.list_drop(@@GLOBAL.sql_mode, 'ONLY_FULL_GROUP_BY');
mysql> SET @@sql_mode = @@GLOBAL.sql_mode;
#+END_SRC

*** Functions

#+BEGIN_SRC sql
SELECT [Name],
       GROUP_CONCAT(DISTINCT [Name]  SEPARATOR ',')
       FROM tbl_cars
#+END_SRC

* VCS

** Git

*** Proxy

#+BEGIN_SRC sh
git config --global http.proxy 'socks5://127.0.0.1:<port>'
# or per-user: export ALL_PROXY='socks5://127.0.0.1:<port>'

# git something...

git config --global --unset http.proxy
#+END_SRC
    
*** Issue

**** =cannot checkout branch - error: pathsepc=

fix the =.git/config= file
#+BEGIN_SRC sh
[remote "origin"]
  url = https://github.com/junjiemars/kit.git
  fetch= +refs/heads/*:refs/remotes/origin/*
#+END_SRC

** Subversion

On Windows, =svn= doesn't support posix repository URL.

#+BEGIN_SRC sh
# create repository
svnadmin create </opt/lab/vcs/svn/repo>

# make hooks/pre-revprop-change file
chmod u+x hooks/pre-revprop-change

# checkout repository
svn checkout <file://E:/lab/vcs/svn/repo>

# update local
svn update

# commit
svn add .
svn commit -m"message"

# log
svn log --limit 8
#+END_SRC


hooks/pre-revprops-change
#+BEGIN_SRC sh
#!/bin/sh
exit 0;
#+END_SRC

** Git and Subversion Bridge

Clone the SVN repository
#+BEGIN_SRC sh
git svn clone <file:///a/b/c>
#+END_SRC

Create a new branch to modify or work on a new feature
#+BEGIN_SRC sh
git checkout -b <new-branch>
#+END_SRC

Work on your newly created branch in the local repository as
usual. Once complete, you can switch to the master branch and merge
your changes to master.
#+BEGIN_SRC sh
git checkout master
git merge <new-branch>
#+END_SRC

Update your SVN repository
#+BEGIN_SRC sh
git svn rebase
#+END_SRC

Commit back to the SVN repository
#+BEGIN_SRC sh
git svn dcommit -m"commit back"
#+END_SRC

** References
- [[https://git-scm.com/book/en/v1/Git-and-Other-Systems-Git-and-Subversion][Git and Other Systems Git and Subversion]]

* Language
	:PROPERTIES:
	:CUSTOM_ID: language
	:END:

** Java

*** Install

#+BEGIN_SRC shell :dir /sudo:: :exports none
sudo apt show openjdk-11-jdk
#+END_SRC

#+BEGIN_SRC shell :dir /sudo:: :exports none
sudo apt show openjdk-11-jdk-headless
#+END_SRC

#+BEGIN_SRC shell :dir /sudo:: :exports none :var openjdk=(read-from-minibuffer "openjdk version: " "openjdk-11")
sudo apt show ${VER}-dbg
#+END_SRC

#+BEGIN_SRC shell :dir /sudo:: :var VER=(read-from-minibuffer "openjdk version: " "openjdk-11")
# VER=openjdk-11, default version
sudo apt update
sudo install ${VER}-jdk ${VER}-dbg ${VER}-11-doc
sudo update-alternatives --install /usr/bin/java, java `echo $JAVA_HOME`/bin/java
sudo update-alternatives --install /usr/bin/javac, javac `echo $JAVA_HOME`/bin/javac
sudo update-alternatives --install /usr/bin/jhsdb, jhsdb `echo $JAVA_HOME`/bin/jhsdb
#+END_SRC

*** jps

#+BEGIN_SRC shell
jps -vl
#+END_SRC

*** jhsdb

#+BEGIN_SRC shell
jhsdb -h
#+END_SRC

**** jstack

#+BEGIN_SRC shell :results drawer
jhsdb jstack -h
#+END_SRC

**** jmap

#+BEGIN_SRC shell :var PASSWORD=(read-passwd "sudo password: ") :var PID=41223
echo $PASSWORD | sudo -S jhsdb jmap --pid $PID
#+END_SRC

*** =jd.sh=
 	 :PROPERTIES:
	 :CUSTOM_ID: jdsh
	 :END:

Allow =jdb= to attach process on Ubuntu.

*** OpenJFX

#+BEGIN_EXAMPLE sh
,* --module-path /Users/<user>/Downloads/javafx-sdk-11/lib --add-modules=javafx.controls,javafx.fxml
#+END_EXAMPLE

** Kotlin
** Node.js

=NODE_OPTIONS= environment variable
#+BEGIN_SRC shell
export NODE_OPTIONS="--max-old-space-size=1024"
#+END_SRC

*** References
- [[https://kotlinlang.org/docs/tutorials/command-line.html][Working with the Command Line Compiler]]

* SSL

** Certificate Signing Request

#+BEGIN_SRC sh
# generate a private key and a CSR(Certificate Signing Request)
openssl req -newkey rsa:2048 -nodes -keyout x.key -out x.csr
#+END_SRC

#+BEGIN_SRC sh
	openssl req \
					-newky rsa:2048 -nodes -keyout x.key \
					-x509 -days 365 -out z.crt
#+END_SRC


#+BEGIN_SRC sh
keytool -v -list -keystore <key-store>
#+END_SRC

** References

- [[https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs][OpenSSL Essentials: Working with SSL Certificates, Private Keys and CSRs]]
- [[https://superuser.com/questions/437330/how-do-you-add-a-certificate-authority-ca-to-ubuntu][Key Store]]

* Hardware

** CPU

*** hwloc
*** numactl

* All
	:PROPERTIES:
	:CUSTOM_ID: all
	:END:

** IDE
	 :PROPERTIES:
	 :CUSTOM_ID: all-ide
	 :END:

*** IDEA Intellij
		:PROPERTIES:
		:CUSTOM_ID: all-ide-idea-intellij
		:END:

**** Performance

Find the configuration file: =idea64.vmoptions= at
=~/.config/JetBrains=.
#+BEGIN_SRC sh
-Xms128m
-Xmx1024m
-XX:+UseParallelGC
-XX:+UseAdaptiveSizePolicy
-XX:-UseConcMarkSweepGC
#+END_SRC

- =-Xms=: specify the initial memory allocation pool.
- =-Xmx=: specify the maximum memory allocation pool.
- =+UseParallelGC=: faster responsibilies but may be unstable
- =-XX:+UseParallelGC=: faster responsibilies but may be unstable
- =-XX:+UseAdaptiveSizePolicy=: faster responsibilies but may be unstable
- =-XX:-UseConcMarkSweepGC=: faster responsibilies but may be unstable
	
**** Unified Gradle

Default gradle home at =~/.gradle=.

Open File=>=Settings=>=

**** Keymap

[[file:all/ide/idea/idea-jar-kit.sh][idea-jar-kit.sh]] import/export settings.

- Navigation: @@html:<kbd>@@C-N@@html:</kbd>@@
	- go to declaration or usages: @@html:<kbd>@@C-N d@@html:</kbd>@@
	- go to implementations: @@html:<kbd>@@C-N i@@html:</kbd>@@
	- go to super method: @@html:<kbd>@@C-N u@@html:</kbd>@@
	- show type hierarchy: @@html:<kbd>@@C-N t@@html:</kbd>@@

- File
	- close project: @@html:<kbd>@@C-x C-c@@html:</kbd>@@
	- go to file: @@html:<kbd>@@C-x C-f@@html:</kbd>@@
	- toggle readonly attribute: @@html:<kbd>@@C-x C-q@@html:</kbd>@@
	- show New dialog: @@html:<kbd>@@C-X n@@html:</kbd>@@
	- save all: @@html:<kbd>@@C-x C-s@@html:</kbd>@@

- Window
	- switcher: @@html:<kbd>@@C-x C-b@@html:</kbd>@@
	- hide active tool window: @@html:<kbd>@@S-ESC@@html:</kbd>@@
	- hide side tool window: @@html:<kbd>@@C-x ,@@html:</kbd>@@
	- hide all tool window: @@html:<kbd>@@C-x 9@@html:</kbd>@@

	- split:
  	- unsplit all: @@html:<kbd>@@C-x 1@@html:</kbd>@@
		- split right: @@html:<kbd>@@C-x 3@@html:</kbd>@@
		- split down: @@html:<kbd>@@C-x 2@@html:</kbd>@@
		- go to next splitter: @@html:<kbd>@@C-x C-o@@html:</kbd>@@

	- resize:
	  - stretch to left: @@html:<kbd>@@C-x {@@html:</kbd>@@
		- stretch to left: @@html:<kbd>@@C-x }@@html:</kbd>@@
		- stretch to top: @@html:<kbd>@@C-x _@@html:</kbd>@@
    - stretch to bottom: @@html:<kbd>@@C-x +@@html:</kbd>@@

- Editing

- Debugging

- Terminal
	- close session: @@html:<kbd>@@C-W@@html:</kbd>@@
	- new session: @@html:<kbd>@@C-T@@html:</kbd>@@
